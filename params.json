{"name":"Pazwork","tagline":"PazWork is based on Hackwork v2.0.1 (http://git.io/hackwork) but improved and powered","body":"# Hackwork\r\n\r\n> Layout-based PHP micro-framework for full-stack HTML5 sites\r\n\r\nHackwork is a layout-based PHP micro-framework made for HTML5 sites. You can\r\nalso make HTML4 sites with Hackwork, don't worry.\r\n\r\nMinimal required PHP version is 5.3.0. Hackwork may work on older PHP versions,\r\nbut they aren't officially supported.\r\n\r\n## Table of contents\r\n\r\n- [Example](#example)\r\n- [Getting started](#getting-started)\r\n- [Directory structure](#directory-structure)\r\n- [Core](#core)\r\n- [Configuration](#configuration)\r\n- [Layouts](#layouts)\r\n- [HTTP](#http)\r\n- [Errors](#errors)\r\n- [Contributing](#contributing)\r\n- [License](#license)\r\n\r\n## Example\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once 'core/hackwork.php';\r\nlayout('default', 'home');\r\n```\r\n\r\n## Getting started\r\n\r\n1. Clone the repository.\r\n2. [Modify layouts for your pages](#new-layout).\r\n3. Fill `data/` and `assets/`.\r\n4. Test your site locally to see does everything works well.\r\n\r\n## Directory structure\r\n\r\nHackwork projects should have a simple directory structure.\r\n\r\n```\r\n.\r\n├── assets/\r\n│   ├── css/\r\n│   ├── fonts/\r\n│   ├── img/\r\n│   ├── js/\r\n│   ├── ...\r\n├── core/\r\n│   ├── helpers/\r\n│   ├── hackwork.php\r\n├── data/\r\n│   ├── ...\r\n└── layouts/\r\n    └── .../\r\n        ├── footer.php\r\n        ├── header.php\r\n        ├── i.functions.php\r\n        ├── i.variables.php\r\n        └── ...\r\n```\r\n\r\n`assets/` is the place of cachable resources (e.g. JavaScript).\r\n\r\n`core/` is the place of framework core.\r\n\r\n`data/` is the place of pages content.\r\n\r\n`layouts/` is the base layouts directory.\r\n\r\n## Core\r\n\r\n### Constants\r\n\r\nThere are path and configuration constants.\r\n\r\n#### Paths\r\n\r\n- `ROOT`: server root path; don't change if not necessary\r\n- `PATH`: site root path\r\n- `CORE`: framework core path, `PATH`-relative\r\n- `HELPERS`: helpers path, `CORE`-relative\r\n- `LAYOUTS`: layouts path, `PATH`-relative\r\n- `DATA`: data files path, `PATH`-relative\r\n- `ASSETS`: assets path, isn't `PATH`-relative\r\n- `CSS`: CSS assets path, `ASSETS`-relative\r\n- `JS`: JavaScript assets path, `ASSETS`-relative\r\n- `FONTS`: fonts path, `ASSETS`-relative\r\n- `IMG`: images path, `ASSETS`-relative\r\n\r\nYou should omit trailing slashes in path constants.\r\n\r\n#### Environment\r\n\r\nThere is an environment constant, `ENV`. Its values are:\r\n\r\n- `development` for complete error reporting\r\n- `production` for minimal error reporting\r\n\r\nBy default it's `development`. You should change it if your site is for\r\nproduction.\r\n\r\n### Helpers\r\n\r\nHackwork has some helpers, e.g. to make layout. All of them are within\r\n`core/helpers/` and they're imported to `core/hackwork.php`.\r\n\r\n## Configuration\r\n\r\nServer configuration is in the `core/helpers/config.php`. You should edit it to\r\nadjust the configuration.\r\n\r\n### Compression\r\n\r\nPages loads faster with compression, so Hackwork enables it by default.\r\n\r\n### Default charset\r\n\r\nThere is a charset definition to ensure right charset is used everywhere.\r\nHackwork sets default charset to UTF-8.\r\n\r\n### Default timezone\r\n\r\nPHP requires default timezone for proper working of time functions. Hackwork\r\nsets default timezone to UTC.\r\n\r\n## Layouts\r\n\r\nHackwork uses layouts as page generating model.\r\n\r\n### Layout basics\r\n\r\nLayouts are like page templates. You don't need to learn new templating\r\nlanguage as Hackwork uses pure PHP syntax.\r\n\r\n#### Layout sections\r\n\r\n- `header.php`: page top\r\n- page content (loaded from `data/`)\r\n- `footer.php`: page bottom\r\n\r\n#### Other layout files\r\n\r\nUse `i.` prefix for layout files that should be included. Core `i.` files are:\r\n\r\n- `i.variables.php`: layout variables\r\n- `i.functions.php`: layout functions\r\n\r\nYou can create additional `i.` files, e.g. for constants and classes.\r\n\r\n### Layout generator\r\n\r\nTo generate layout, use `layout($layout, $data, $page_title)` function.\r\n\r\n### Default layout\r\n\r\nDefault layout is just a template. It lies within `layouts/default/`.\r\n\r\n#### Default layout variables\r\n\r\nDefault layout variables are in `layouts/default/i.variables.php`.\r\n\r\n##### Default layout base variables\r\n\r\n- `$doctype`: document type\r\n\r\n##### Default layout meta variables\r\n\r\n- `$charset`: character set\r\n- `$meta`: `<meta>` tags content array\r\n  - `$meta['site_title']`: site title\r\n  - `$meta['author']`: site author\r\n  - `$meta['description']`: site description\r\n  - `$meta['keywords']`: site keywords separated with comma\r\n  - `$meta['robots']`: robots meta setting\r\n  - `$meta['viewport']`: visible part of canvas at page\r\n- `$title_divider`: divider between page and site title\r\n- `$title`: generated title\r\n\r\n##### Default layout assets variables\r\n\r\n- `$stylesheet`: `<link rel=\"stylesheet\">` tags content array\r\n- `$icon`: `<link rel=\"*icon\">` tags content array\r\n  - `$icon['favicon']`: favicon path\r\n  - `$icon['apple_touch_icon']`: Apple touch icon path\r\n- `$script`: `<script>` tags content array\r\n\r\n##### Default layout copyright variables\r\n\r\n- `$cpsign`: copyright sign\r\n- `$cpyear`: first copyright year\r\n- `$cpowner`: copyright owner\r\n- `$copyright`: copyright text\r\n\r\n#### Default layout functions\r\n\r\nDefault layout functions are in `layouts/default/i.functions.php`.\r\n\r\n##### Default layout generation functions\r\n\r\n- `make_meta($array)`: generates `<meta>` tags from given array\r\n- `make_stylesheets($array)`: generates `<link rel=\"stylesheet\">` tags from\r\n  given array\r\n- `make_icons($array)`: generates `<link rel=\"*icon*\">` tags from given array\r\n- `make_scripts($array)`: generates `<script>` tags from given array\r\n\r\n##### Default layout basic functions\r\n\r\n- `is_currentfile($file)`: checks is the given argument current file\r\n- `filecount($dir, $ignore)`: counts files in a directory\r\n- `cat($url, $pre)`: imitates `cat` Unix command\r\n- `randomval($array)`: selects a random value from array\r\n- `undot($string)`: removes dots from string\r\n\r\n### New layout\r\n\r\nTo make a new layout, create a new directory within `layouts/` and follow\r\n[layout basics](#layout-basics). You can use [default layout](#default-layout)\r\nas template.\r\n\r\n## HTTP\r\n\r\nHackwork caches HTTP properties and header messages for easier HTTP control.\r\n\r\n### HTTP properties\r\n\r\n- `$httpv`: HTTP version; don't change if not necessary\r\n\r\n### HTTP headers\r\n\r\n`$header` is an array of default HTTP header messages. You can use headers with\r\n`$header[<status-number>]`.\r\n\r\n## Errors\r\n\r\nHackwork has a simple error thrower.\r\n\r\n### Exit status codes\r\n\r\n- `EXIT_SUCCESS`: no errors\r\n- `EXIT_ERROR`: generic error\r\n- `EXIT_CONFIG`: configuration error\r\n- `EXIT_UNKNOWN_FILE`: file not found\r\n- `EXIT_UNKNOWN_CLASS`: unknown class\r\n- `EXIT_UNKNOWN_METHOD`: unknown class member\r\n- `EXIT_USER_INPUT`: invalid user input\r\n- `EXIT_DATABASE`: database error\r\n- `EXIT_AUTO_MIN`: minimal automatically-assigned error code\r\n- `EXIT_AUTO_MAX`: maximal automatically-assigned error code\r\n\r\n### Error thrower\r\n\r\nTo throw an error, set consistent headers and terminate script, use\r\n`throwerr($header_status, $exit_status, $msg, $header_msg)`.\r\n\r\n## Contributing\r\n\r\nWant to contribute? Check out\r\n[contributing guide](https://github.com/ZDroid/hackwork/blob/master/CONTRIBUTING.md).\r\n\r\n## License\r\n\r\nMIT &copy; [Zlatan Vasović](https://github.com/ZDroid)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}